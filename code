from tkinter import *
from tkinter import ttk 

#En klass: Vara
#Parametrar: kod = str, namn = str, pris = float, max_antal = int, antal = int = 0 som standard
class Vara: 
    def __init__(self,kod,namn,pris,max_antal,antal = 0):
        self.kod = kod
        self.namn = namn
        self.pris = pris
        self.max_antal = max_antal
        self.antal = antal
    
    #Funktion: add
    #Indata: antal = str
    #Utdata: False, True, str = "antal"
    #Funktionen kollar om indatan antal kan läggas till i self.antal utan probel och gör det om det går. Går det inte returneras False eller
    #"antal" beroende på varför det inte går
    def add(self,antal): 
        try:            
            antal = int(antal)
            if antal < 0:
                return False
            elif (self.antal + antal) <= self.max_antal:
                self.antal += antal
                return True
            else: 
                txt = "antal"
                return txt
        except: 
            return False

    #Funktion: remove
    #Indata: antal = str, self
    #Utdata: False, True, str = "antal"
    #Funktionen kollar om indatan antal kan tas bort från self.antal utan probel och gör det om det går. Går det inte returneras False eller 
    #"antal" beroende på varför det inte går
    def remove(self, antal):
        try:
            antal = int(antal)
            if (self.antal - antal) >= 0:
                self.antal -= antal
                return True
            else:
                txt = "antal"
                return txt
        except:
            return False

    #Funktion: summa
    #Indata: self
    #Utdata: summa = int
    #Funktionen returnerar totala priset
    def summa(self): 
        summa = self.antal*self.pris
        return summa

    #Funktion: kod_namn
    #Indata: self
    #Utdata: txt = str
    #Returnerar klassens namn och kod i snyggt format
    def kod_namn(self):  
        txt = "{0:<10}".format(self.namn) + self.kod
        return txt

    #Funktion: str_for_file
    #Indata: self
    #Utdata: str
    #Returnerar alla klassens parametrar i en sträng i passande format för att skrivas in i en text fil
    def str_for_file(self): 
        ant = self.max_antal - self.antal
        return f"{self.kod}\n{self.namn}\n{self.pris},{ant}"

#Fuktion: read_file
#Indata: fil_namn = str
#Utdata: varulista = list
#Öppnar och läser filen med namn "fil_namn" och skappar en klass för varje vara i text filen med de parametraar som fås från filen
def read_file(fil_namn): 
    f = open(fil_namn, "r", encoding="utf-8") 
    sträng = f.read()
    f.close()
    sträng = sträng.replace("\n",",")
    lista = sträng.split(",")
    varulista = []
    for i in range(0,len(lista)-1,4):
        lista[i] = Vara(str(lista[i]),str(lista[i+1]),float(lista[i+2]),int(lista[i+3]),0)
        varulista.append(lista[i])
    return varulista

varulista = read_file("varufil.txt") 
köpta_varor = []

#Funktion: kvitto
#Indata: köpta_varor = list
#Utdata: rad_tot = str
#Skapar en sträng i form av ett kvitto med alla varor i listan köpta_varor samt deras antal, pris, och totala pris
def kvitto(köpta_varor): 
    v1= "Varunamn"
    v2 = "Antal"
    v3 = "A-pris"
    v4 = "Summa"
    rad1 = "{0:<15}".format(v1) +"{0:<10}".format(v2)+"{0:<10}".format(v3)+"{0:<10}".format(v4)
    rad2 = "-"*45
    rad_tot = rad1+"\n"+rad2
    for item in köpta_varor:
        rad_tot += "\n"+"{:<15}".format(item.namn) +"{:<10}".format(item.antal)+"{:<10}".format(item.pris)+"{:<10}".format(item.summa())
    rad_tot += "\n"+"_"*45
    v1= "Totalt"
    v2 = 0
    v3 = 0
    for item in köpta_varor:
        v2 += int(item.antal)
        v3 += int(item.summa())
    rad_tot += "\n"+"{0:<15}".format(v1) +"{0:<20}".format(v2)+"{0:<10}".format(v3)+" "
    return rad_tot

kod_lista = ""
for i in range(len(varulista)): 
    string = str(varulista[i].kod_namn()) + "\n"
    kod_lista += string

root = Tk() #skapar ett GUI fönster
root.title("Varuprisdatabas")
root.geometry("600x500")

#Funktion: add_item
#Indata: ingen
#Globala parametrar: varulista = list, köpta_varor = list
#Utdata: ingen
#Kollar om användarens input är på korrekt format och prövar att öka den designerade varans antal med det angivna värdet. Beroende på om
#detta går eller inte ändras texten på en Lable till anledningen till att det inte går. Är varan inte köpt förut läggs varan till 
#i listan köpta_varor
def add_item(): 
    global varulista, köpta_varor 
    e_text = entry.get()            
    e_text = e_text.split(" ")
    if len(e_text) == 2 or len(e_text) == 1:
        for i in varulista:
            if e_text[0] == i.kod:
                if len(e_text) == 1:
                    res = i.add(1)
                else:
                    res = i.add(e_text[1])
                if res == True:
                    my_label3.config(text = "")
                elif res == "antal":
                    my_label3.config(text = "för många obejkt!")
                else:
                    my_label3.config(text = "felaktig input!")
                if i not in köpta_varor and i.antal != 0:
                    köpta_varor.append(i)
                my_label1.config(text = kvitto(köpta_varor))
            else:
                pass
    else:
        my_label3.config(text = "felaktig input!")

#Funktion: remove_item
#Indata: 
#Globala parametrar: varulista = list, köpta_varor = list
#Utdata: 
#Kollar om användarens input är på korrekt format och prövar att minska den designerade varans antal med det angivna värdet. Beroende på om
#detta går eller inte ändras texten på en Lable till anledningen till att det inte går. Om varans antal blir 0 tas varan bort från
#listan köpta_varor
def remove_item(): 
    global varulista, köpta_varor
    e_text = entry.get()
    e_text = e_text.split(" ")
    if len(e_text) == 2:
        for i in varulista:
            if e_text[0] == i.kod:
                if len(e_text) == 1:
                    res = i.remove(1)
                else:
                    res = i.remove(e_text[1])
                if res == True:
                    my_label3.config(text = "")
                elif res == "antal":
                    my_label3.config(text = "Kan inte ha mindre än noll av en vara")
                else:
                    my_label3.config(text = "felaktig input!")
                if i in köpta_varor and i.antal == 0:
                    köpta_varor.remove(i)
                my_label1.config(text = kvitto(köpta_varor))
            else:
                pass
    else:
        my_label3.config(text = "felaktig input!")

#Funktion: avsluta
#Indata: 
#Utdata:
#När kallad så ändras kanpparna och sökfältets state till DISABLED alltså fungerar de inte längre. Sedan skapas en sträng txt som 
#fylls med alla varor information för att sendan skrivas in i text filen "varufil.txt"
def avsluta(): 
    mybutton1["state"] = DISABLED
    mybutton2["state"] = DISABLED
    entry.config(state = DISABLED)
    txt = ""
    for item in range(0,len(varulista)):
        txt += str(varulista[item].str_for_file()) + "\n"
    f = open("varufil.txt", "w", encoding="utf-8")
    f.write(txt)
    f.close()

#Nedan skapas ett GUI fönster med knappar och lables samt ett sökfält
entry = ttk.Entry(root)
entry.insert(0,"(kod) (antal)")

my_label1 = Label(root, width = 45, text = kvitto(köpta_varor), justify = LEFT, font = "TkFixedFont")
my_label2 = Label(root, text = kod_lista, justify = LEFT, font = "TkFixedFont")
my_label3 = Label(root, text = "Giltig input ges av: varans-kod(space)antal-av-varan")

mybutton1 = Button(root, text = "Lägg till vara", command = add_item)
mybutton2 = Button(root, text = "Ta bort vara", command = remove_item)
mybutton3 = Button(root, text = "Avsluta köp", command = avsluta)

entry.grid(row=3, column=3)
my_label1.grid(row=1, column=2, columnspan=3)
my_label2.grid(row=0, column=0)
my_label3.grid(row=4, column=3)
mybutton1.grid(row=3, column= 2)
mybutton2.grid(row = 3, column = 4)
mybutton3.grid(row = 5, column = 3)

root.mainloop()
